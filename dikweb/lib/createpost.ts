import axios from 'axios'
import { MutationFunctionOptions } from '@apollo/client'
import { Maybe } from 'graphql/jsutils/Maybe'
import {
	CreateAttachmentInput,
	CreatePostInput,
	CreatePostMutation,
	Exact,
} from '../generated/graphql'

interface Props {
	useHook: (
		options?:
			| MutationFunctionOptions<
					CreatePostMutation,
					Exact<{
						createPostinput: CreatePostInput
						createAttachmentInput?:
							| Maybe<CreateAttachmentInput>
							| undefined
					}>
			  >
			| undefined
	) => Promise<any>
	caption: string
	postType: string
	rawImage?: Blob | null
}

export default async function CreatePost(props: Props) {
	try {
		if (!props.rawImage) {
			/**
			 * If there is NO image property,
			 * upload directly to backend using
			 * hook property generated by codegen
			 */
			const { data } = await props.useHook({
				variables: {
					createPostinput: {
						caption: JSON.stringify(props.caption),
						type: props.postType,
					},
				},
			})

			// return back uploaded post
			return data
		} else {
			/**
			 * If there is image property
			 * for now, it is only for image
			 * future works will add new attachments/media :)
			 *
			 * @first upload to cloudinary
			 * @second get url from cloudinary
			 * @final fire everything to backend
			 */
			const media = new FormData()
			media.append('file', props.rawImage)
			media.append('upload_preset', 'dikenang-posts-media')
			media.append('cloud_name', 'dikenang')

			// Upload To Cloudinary Storage
			const requestToCloudinary = await axios.post(
				'https://api.cloudinary.com/v1_1/dikenang/image/upload',
				media
			)

			const { data } = await props.useHook({
				variables: {
					createPostinput: {
						caption: JSON.stringify(props.caption),
						type: props.postType,
					},
					createAttachmentInput: {
						type: 'image',
						uri: [requestToCloudinary.data.secure_url],
					},
				},
			})

			// return back uploaded post
			return data
		}
	} catch (error) {
		// return error if there is an error in request
		return { error: error }
	}
}
